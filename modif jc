A RAJOUTER DANS Project.css (pour button nouveau projet dans page client "mes projets")
margin-bottom: 20px;


___________________________PROFIL EXPERT AFFICHAGE ET EDIT CV ET RIB ________________________________________________________________________________________________

DANS TEMPLATE profil_expert->index RAJOUTER SOUS LES 2 BTN:

<div id ="cv_rib_profil_expert">
		{% if app.user.cv %}
		<p class="p_profil_expert">Vous avez d√©pos√© un cv/portfolio :<br><br><span class="span_profil_expert">Le voir -></span> <a href="{{path('cv_upload',{id: app.user.id})}}"><img class="img_profil_expert" src="assets/img/cv.webp"></a></p>
		<p>Si celui-l√† n'est plus √† jour : Cliquez sur <span class="span_profil_expert">"D√©poser votre CV"</span> pour en d√©poser un nouveau.</p>
		{% elseif app.user.cv == null %}
		<p class="p_profil_expert">üòÆ Vous n'avez pas encore d√©pos√© de cv/portfolio. Montrez nous vos cr√©ations, cliquez sur <span class="span_profil_expert">"D√©poser votre CV"
		</span>.<br> Nous souhaitons voir votre travail avant de vous confier un projet.</p>
		{% endif %}
		<p>_________________________________________</p> 
		<p class="p_profil_expert">Vous souhaitez v√©rifier votre rib ?<br><br><span class="span_profil_expert">C'est ici -></span> <a href="{{path('rib_upload',{id: app.user.id})}}"><img class="img_profil_expert" src="assets/img/rib.webp"> </a></p>
		<p>Si celui-l√† n'est plus √† jour : Cliquez sur <span class="span_profil_expert">"Modifier profil"</span> pour en d√©poser un nouveau.</p>
		</div>
    
_________________________________
DANS TEMPLATE profil_expert->edit_infos RAJOUTER JUSTE AVANT BTN VALIDER:

<h4>Modifier votre Rib</h4>
				<table class="table">
					<tbody>
						<tr>
							<th>D√©poser votre nouveau Rib</th>
							<td>{{ form_row(EditExpert.rib) }}</td>
						</tr>
						</table>
            
__________________________________
DANS style.css RAJOUTER :

#cv_rib_profil_expert{
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    margin-top: 20px;
    padding-left: 15px;
    padding-right: 10px;
}

.span_profil_expert{
    color: goldenrod;
    font-weight: 500;
}

.p_profil_expert{
    font-weight: 600;
}

.img_profil_expert{
    width: 80px;
    height: 80px;
    clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
    margin-left: 20px;
}

@media only screen and (min-width: 1200px){
    #cv_rib_profil_expert{
        align-items: center;
    }
}

___________________________________________________

DANS ExpertController DANS public function editInfos RAJOUTER (sous le if uploadavatar):

$uploadedFile = $form['rib']->getData();
if ($uploadedFile) {
    $newFilename = $uploaderHelper->uploadRib($uploadedFile, $slugger);
    $user = $form->getData();
    $user->setrib($newFilename);
}

MESSAGE VALIDATION A RAJOUTER ENTRE FLUSH ET REDIRECT:

 $this->addFlash(
                'success',
                'votre profil a bien √©t√© modifi√©'
            );

___________________________________________________

DANS EditProfileExpertType.php RAJOUTER:

 ->add('rib', FileType::class, [
            "label" => false,
            "required" => false,
            'row_attr' => ['class' => 'mb-0 ms-2 avatar'],
            'mapped' => false,
        ])








___________________________________________ PAGE ADMIN DEVIS ________________________________________________________________________________________________________

DANS DevisRepository -> function tousDevis : MODIFIER JUSTE LA REQUETE

  $sql = "SELECT devis.*,user.first_name, user.last_name FROM `devis` INNER JOIN `user` ON devis.user_id=user.id ORDER BY id DESC;";
  
 ______________________________
 
 DANS TEMPLATE Admin/tous_devis.html.twig METTRE :
 
 {% extends 'base_admin.html.twig' %}

{% block title %}
    tous les devis
{% endblock %}

{% block body %}
    <main class="p-5 w-100">
        <h1 class="mb-4">Devis Expert</h1>

        <table class="table text-white">
            <thead>
                <tr>
                    <th>Num√©ro de devis</th>
                    <th>Nom du projet</th>
                    <th>Pr√©nom de l'expert</th>
                    <th>Nom de l'expert</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                {% for devis in devis %}
                    {% if devis.date_redaction %}
                        <tr>
                            <td>{{ devis.id }}</td>
                            <td>{{ devis.reference }}</td>
                            <td>{{ devis.first_name }}</td>
                            <td>{{ devis.last_name}}</td>
                            <td>
                                <a href="{{path('devis_pdf_admin',{id: devis.id})}}">G√©n√©rer un pdf</a>
                            </td>
                        </tr>
                    {% else %}
                        <tr>
                            <td>{{ devis.id }}</td>
                            <td>{{ devis.reference }}</td>
                             <td>{{ devis.first_name }}</td>
                            <td>{{ devis.last_name}}</td>
                            <td>
                                <a href="{{path('devis_upload',{id: devis.id})}}">Voir le devis upload√©</a>
                            </td>
                        </tr>
                    {% endif %}
                {% endfor %}
            </tbody>
        </table>
    </main>
{% endblock %}

______________________________________________________ CONFIRMATION INSCRIPTION ___________________________________________________________________________________

DANS RegistrationController RAJOUTER DANS LES 4 FUNCTION :

 $this->addFlash(
                'success',
                'votre inscription est valid√©e: Bienvenue parmi nous !'
            );


________________________________________________________PETIT COUP REFERENCEMENT __________________________________________________________________________________

DANS TEMPLATE->base RAJOUTER DANS LE head:

<meta name="description" content="Vos id√©es, nos conseils, les meilleures solutions. D√©posez gratuitement vos projets et faites les r√©aliser par les
					meilleurs experts de France. Freelances cr√©ez votre profil et recevez les projets...">
		<title>
			{% block title %}SoustraitesMoi.fr D√©velopper vos projets gr√¢ce aux conseils de nos experts.
			{% endblock %}




___________________________________________________________________________________________________________________________________________________________________
_________________________________________________________CREATION RECHERCHE ADMIN _________________________________________________________________________________

DANS ENTITY Project AJOUTER :
#[ORM\Index(name: 'project', columns: ['nom_du_projet'], flags: ['fulltext'])]

faire migration et verifier dans table->structure qu'il y a bien un index fulltext cr√©√©.


___________________________________________________________________________

DANS SRC CREER DOSSIER Extensions , DANS CE DOSSIER CREER AUTRE DOSSIER Doctrine, DANS CE Doctrine cr√©er fichier MATCHAGAINST ET Y COLLER :

<?php
namespace App\Extensions\Doctrine;

use Doctrine\ORM\Query\AST\Functions\FunctionNode;
use Doctrine\ORM\Query\Lexer;
use Doctrine\ORM\Query\Parser;
use Doctrine\ORM\Query\SqlWalker;

class MatchAgainst extends FunctionNode
{
    /** @var array list of \Doctrine\ORM\Query\AST\PathExpression */
    protected $pathExp = null;
    /** @var string */
    protected $against = null;
    /** @var bool */
    protected $booleanMode = false;
    /** @var bool */
    protected $queryExpansion = false;

    public function parse(Parser $parser)
    {
        // match
        $parser->match(Lexer::T_IDENTIFIER);
        $parser->match(Lexer::T_OPEN_PARENTHESIS);
        // first Path Expression is mandatory
        $this->pathExp = [];
        $this->pathExp[] = $parser->StateFieldPathExpression();
        // Subsequent Path Expressions are optional
        $lexer = $parser->getLexer();
        while ($lexer->isNextToken(Lexer::T_COMMA)) {
            $parser->match(Lexer::T_COMMA);
            $this->pathExp[] = $parser->StateFieldPathExpression();
        }
        $parser->match(Lexer::T_CLOSE_PARENTHESIS);
        // against
        if (strtolower($lexer->lookahead['value']) !== 'against') {
            $parser->syntaxError('against');
        }
        $parser->match(Lexer::T_IDENTIFIER);
        $parser->match(Lexer::T_OPEN_PARENTHESIS);
        $this->against = $parser->StringPrimary();
        if (strtolower($lexer->lookahead['value']) === 'boolean') {
            $parser->match(Lexer::T_IDENTIFIER);
            $this->booleanMode = true;
        }
        if (strtolower($lexer->lookahead['value']) === 'expand') {
            $parser->match(Lexer::T_IDENTIFIER);
            $this->queryExpansion = true;
        }
        $parser->match(Lexer::T_CLOSE_PARENTHESIS);
    }

    public function getSql(SqlWalker $walker)
    {
        $fields = [];
        foreach ($this->pathExp as $pathExp) {
            $fields[] = $pathExp->dispatch($walker);
        }
        $against = $walker->walkStringPrimary($this->against)
            . ($this->booleanMode ? ' IN BOOLEAN MODE' : '')
            . ($this->queryExpansion ? ' WITH QUERY EXPANSION' : '');
        return sprintf('MATCH (%s) AGAINST (%s)', implode(', ', $fields), $against);
    }
}

___________________________________________________________________________________

DANS CONFIG->PACKAGES->doctrine.yaml DANS orm: AJOUTER (/!\ attention √† l'indentation)

 dql:
            string_functions:
                MATCH_AGAINST: App\Extensions\Doctrine\MatchAgainst
		
		
____________________________________________________________________________________

Cr√©er un form SearchProjectType Y COLLER :

<?php

namespace App\Form;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\SearchType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;

class SearchProjectType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('mots', SearchType::class, [
                'label' => false,
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Entrez un ou plusieurs mots cl√©s'
                ]
            ])
            ->add('Rechercher', SubmitType::class)
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            // Configure your form options here
        ]);
    }
}

____________________________________________________________________________________
DANS ProjectRepository AJOUTER :

 public function searchProgressProjects($mots)
    {
        $conn = $this->getEntityManager()->getConnection();

        $sql = "SELECT * FROM (SELECT id, nom_du_projet , type, created_at, user_id , statut FROM `project` UNION SELECT id, nom_du_projet , type, created_at, user_id, statut FROM `project_logo` UNION SELECT id, nom_du_projet , type, created_at, user_id, statut FROM `project_reseaux` UNION SELECT id, nom_du_projet , type, created_at, user_id, statut FROM `project_site`) AS p WHERE p.statut IS NULL AND p.nom_du_projet LIKE '%" . $mots . "%' ORDER BY p.created_at DESC;";

        $stmt = $conn->prepare($sql);
        $resultSet = $stmt->executeQuery();

        // returns an array of arrays (i.e. a raw data set)
        return $resultSet->fetchAllAssociative();
    }
    
    
______________________________________________________________________________________
DANS ProjectCrudController REMPLACER #ROUTE /en-cours PAR :

 #[Route('/en-cours', name: 'app_admin_IpProjects', methods: ['GET','POST'])]
    public function indexIP(ProjectRepository $projectRepository, PaginatorInterface $paginator, Request $request): Response
    {
        
        $form = $this->createForm(SearchProjectType::class);
        $search = $form->handleRequest($request);

        $projects = $projectRepository->findAllInProgressProjects();
        if ($search->get('mots')->getdata()!="") {
            // on recherche les IP Projects correspondant aux mots cl√©s saisis
            $projects = $projectRepository->searchProgressProjects($search->get('mots')->getData());
        }
        
        $projectsPagination = $paginator->paginate(
            $projects, /* query NOT result */
            $request->query->getInt('page', 1), /*page number*/
            10 /*limit per page*/
        );
        
               
        return $this->render('admin/in-progress_projects.html.twig', [
            'projects' => $projectsPagination,
            //recherche
            'form' => $form->createView()
        ]);
    }

_________________________________________________________________________________________________
DANS TEMPLATE in-progress_projects (juste sous le h1) AJOUTER :

{{ form(form) }}




___________________________________________________________________ RECHERCHE PROJETS VALIDES ______________________________________________________________________

DANS ProjectCrudController remplacer #ROUTE '/' PAR :


    #[Route('/', name: 'app_admin_projects', methods: ['GET','POST'])]
    #[IsGranted('ROLE_ADMIN')]
    public function indexAll(ProjectRepository $projectRepository, PaginatorInterface $paginator, Request $request): Response
    {
        $form = $this->createForm(SearchProjectType::class);
        $search = $form->handleRequest($request);

        $projects = $projectRepository->findAllProjects();
       if ($search->get('mots')->getdata()!="") {
            // on recherche les IP Projects correspondant aux mots cl√©s saisis
            $projects = $projectRepository->searchValidProjects($search->get('mots')->getData());
        }

        $projectsPagination = $paginator->paginate(
            $projects, /* query NOT result */
            $request->query->getInt('page', 1), /*page number*/
            10 /*limit per page*/
        );

        return $this->render('admin/valid_projects.html.twig', [
            'projects' => $projectsPagination,
            'form' => $form->createView()
        ]);
    }
    
    
_______________________________________________________________________
DANS ProjectRepository METTRE :

 public function searchValidProjects($mots)
    {
        $conn = $this->getEntityManager()->getConnection();

        $sql = "SELECT * FROM (SELECT id, nom_du_projet , type, created_at, user_id , statut FROM `project` UNION SELECT id, nom_du_projet , type, created_at, user_id, statut FROM `project_logo` UNION SELECT id, nom_du_projet , type, created_at, user_id, statut FROM `project_reseaux` UNION SELECT id, nom_du_projet , type, created_at, user_id, statut FROM `project_site`) AS p WHERE p.statut = true AND p.nom_du_projet LIKE '%" . $mots . "%' ORDER BY p.created_at DESC";

        $stmt = $conn->prepare($sql);
        $resultSet = $stmt->executeQuery();

        // returns an array of arrays (i.e. a raw data set)
        return $resultSet->fetchAllAssociative();
    }
    
    
 _____________________________________________________________________
 DANS TEMPLATE vaid_projects METTRE (juste sous le h1)
 
 {{ form(form) }}
 
 
 /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ FAIRE PAREIL POUR 3e CATEGORIE DE PROJETS MAIS QUE J'AI PAS MOI  /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\


_____________________________________________________________ RECHERCHE UTILISATEURS ______________________________________________________________________________

ENTITY USER:
#[ORM\Index(name: 'utilisateurs', columns: ['first_name','last_name'], flags: ['fulltext'])]



DANS UserRepository METTRE :
 /**
     * Recherche les utilisateurs en fonction du formulaire
     * @return void
     */
    public function searchClient($mots,$role)
    {
        $query = $this->createQueryBuilder('u');
        $query->where ('u.roles LIKE :role')
        // if ($mots != null) {
            ->andWhere('MATCH_AGAINST(u.firstName , u.lastName) AGAINST (:mots boolean)>0')
                ->setParameters(array('mots'=> $mots, 'role' =>'%'.$role.'%'));
        // }
        return $query->getQuery()->getResult();
    }
    
   ________________________________________________________________
   DANS UserCrudController :
   
   REMPLACER #ROUTE /client par :
    #[Route('/client', name: 'app_admin_client', methods: ['GET','POST'])]
    public function indexClient(UserRepository $userRepository, PaginatorInterface $paginator, Request $request): Response
    {
        $form = $this->createForm(SearchProjectType::class);
        $search = $form->handleRequest($request);
        
        $role = "ROLE_CLIENT";
        $users = $userRepository->findUsersByRole($role);

        if ($search->get('mots')->getdata()!="") {
            // on recherche les IP Projects correspondant aux mots cl√©s saisis
                $users = $userRepository->searchClient($search->get('mots')->getData(),$role);
        }


        $usersPagination = $paginator->paginate(
            $users, /* query NOT result */
            $request->query->getInt('page', 1), /*page number*/
            10 /*limit per page*/
        );

        return $this->render('admin/users.html.twig', [
            'users' => $usersPagination,
            'roleTitle' => "Client", 
            'form' => $form->createView()
        ]);
    }
    
    REMPLACER #ROUTE/Expert PAR :
    
    #[Route('/expert', name: 'app_admin_expert', methods: ['GET','POST'])]
    public function indexExpert(UserRepository $userRepository, PaginatorInterface $paginator, Request $request): Response
    {
        $form = $this->createForm(SearchProjectType::class);
        $search = $form->handleRequest($request);
        
        $role = "ROLE_EXPERT";

        $users = $userRepository->findUsersByRole($role);

        if ($search->get('mots')->getdata()!="") {
            // on recherche les IP Projects correspondant aux mots cl√©s saisis
            $users = $userRepository->searchClient($search->get('mots')->getData(),$role);
        }

        $usersPagination = $paginator->paginate(
            $users, /* query NOT result */
            $request->query->getInt('page', 1), /*page number*/
            10 /*limit per page*/
        );

        return $this->render('admin/users.html.twig', [
            'users' => $usersPagination,
            'roleTitle' => "Expert",
            'form' => $form->createView()
        ]);
    }

_____________________________
DANS TEMPLATE admin->user RAJOUTER :
{{ form(form) }}


_____________________________________________________________ RECHERCHE DEVIS ________________________________________________________________________________________

Entity Devis RAJOUTER :
#[ORM\Index(name: 'devis', columns: ['reference'], flags: ['fulltext'])]

faire migration
________________________________________________________

DANS DevisRepository METTRE :

 /**
     * Recherche les utilisateurs en fonction du formulaire
     * @return void
     */
    public function searchDevis($mots)
    {
        
        $conn = $this->getEntityManager()->getConnection();

        $sql = "SELECT devis.*,user.first_name, user.last_name FROM `devis` INNER JOIN `user` ON devis.user_id=user.id WHERE devis.reference LIKE '%" . $mots . "%';";

        $stmt = $conn->prepare($sql);
        $resultSet = $stmt->executeQuery();

        // returns an array of arrays (i.e. a raw data set)
        return $resultSet->fetchAllAssociative();

    }
    
   _____________________________________________________
   
   DANS DevisContoller METTRE :
   
   REMPLACER #ROUTE tous-les-devis PAR :
   
    #[Route('/tous-les-devis', name: 'tous_devis', methods: ['GET', 'POST'])]
    public function imprimedevis(Request $request, DevisRepository $devisRepository)
    {
        $form = $this->createForm(SearchProjectType::class);
        $search = $form->handleRequest($request);
        $devis = $devisRepository->tousDevis();

        if ($search->get('mots')->getdata()!="") {
            // on recherche les devis correspondant aux mots cl√©s saisis
            $devis = $devisRepository->searchDevis($search->get('mots')->getData());
        }

        return $this->render('admin/tous_devis.html.twig', [
            'devis' => $devis,
            'form' => $form->createView()
        ]);
    }
    
    _________________________________________________________
    
    DANS TEMPLATE tous_devis METTRE :
    
    {{ form(form) }}


_____________________________________________ modif joffrine ____________________________________________________________________________________________________

DANS index.css REMPLACER PAR :
.section_partenaire{
    background-color: #FFBF23;
}

@media only screen and (min-width: 992px)
.quote_card {
        margin: 3% 1%;
    }
    
 (dans template home, sur toute derniere image rajouter id="img_bas_home" )   
    #img_bas_home {
        width: 700px;
    }
    
   ________________________________________________
   DANS TEMPLATE footer REMPLACER ADRESSE PAR :
   
   120 Route de Paris <br> 76240 Le Mesnil-Esnard
   
   ________________________________________________
   Formulaire ProjetSite :
   
   ->add 'service ' REMPLACER LE LABEL PAR:
    'label' => 'Services (Service client / vente √† domicile) :',
    
    
    ______________________________________________________________ TOUTES DERNIERES MODIF ____________________________________________________________________________
    
    DANS TEMPLATE _form_site.html.twig REMPLACER LE H3 PAR:
     <h3>Fonctionnalit√©s du site : (remplissez par oui ou par non)</h3>
         <h3>Brief cr√©atif (Souhaitez vous que l'on vous fournisse...?)<br> R√©pondez par oui ou par non et t√©l√©versez un fichier si n√©cessaire. :</h3>
	 
	 
DANS FORM ProjectSiteType REMPLACER LE ADD->LOGO PAR :
->add('logo', TextType::class, [
                'label' => 'Logo ?',
                'label_attr' => ['class' => "form-label-misc"],
                'attr' => ['maxlength' => 150,
            'placeholder' => "par ex -> non j'en ai d√©ja un"
            ],
                'required' => true,
            ])

     
DANS FORM DevisFormType REMPLACER LE LABEL DE add->Images PAR :
'label' => 'T√©l√©verser votre devis en pdf',


DANS TEMPLATE Devis->index REMPLACER LE H6 TOUT EN HAUT PAR :
 <h6 id="h6_devis">Remplissez ce formulaire.<br>
        ou<br>
        T√©l√©versez votre mod√®le de devis.</h6>
	
	
DANS TEMPLATE Expert->cvexpert.html.twig

h3-> retirer le "mini" devant prtfolio
    
