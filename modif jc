A METTRE DANS TEMPLATE/HOME/INDEX

<aside id="finder">
  <div id="carousel">
    <div class="hideLeft">
      <img src="assets/img/carousel1.webp">
    </div>
    <div class="hideLeft">
      <img src="assets/img/carousel2.webp">
    </div>
    <div class="hideLeft">
      <img src="assets/img/carousel3.webp">
    </div>
    <div class="hideLeft">
      <img src="assets/img/carousel4.webp">
    </div>
    <div class="hideLeft">
      <img src="assets/img/POCHON VERT COMBI.png">
    </div>
    <div class="hideLeft">
      <img src="assets/img/carousel5.webp">
    </div>
    <div class="prevLeftSecond">
      <img src="assets/img/carousel6.webp">
    </div>
    <div class="prev">
      <img src="assets/img/carousel7.webp">
    </div>
    <div class="selected">
      <img src="assets/img/carousel8.jpg">
    </div>
    <div class="next">
      <img src="assets/img/carousel9.webp">
    </div>
    <div class="nextRightSecond">
      <img src="assets/img/carousel10.webp">
    </div>
    <div class="hideRight">
      <img src="assets/img/carousel11.webp">
    </div>
    <div class="hideRight">
      <img src="assets/img/carousel12.webp">
    </div>
    <div class="hideRight">
      <img src="assets/img/carousel13.webp">
    </div>
    <div class="hideRight">
      <img src="assets/img/carousel14.webp">
    </div>
    <div class="hideRight">
      <img src="assets/img/carousel15.webp">
    </div>
    <div class="hideRight">
      <img src="assets/img/carousel16.webp">
    </div>
  </div>
</aside>

TEMPLATE/HOME/INDEX A METTRE (juste images renomÃ©es et converties en webp)

<section class="section_partenaire home_container">
    <h2>Ils nous font confiance</h2>
    <div class="grid">
      <img class="logo_partenaire" src="{{asset('assets/img/carousel15.webp')}}" alt="Logo">
      <img class="logo_partenaire" src="{{asset('assets/img/carousel8.jpg')}}" alt="Logo">
      <img class="logo_partenaire" src="{{asset('assets/img/carousel3.webp')}}" alt="Logo">
      <img class="logo_partenaire" src="{{asset('assets/img/carousel12.webp')}}" alt="Logo">
      <img class="logo_partenaire" src="{{asset('assets/img/carousel14.webp')}}" alt="Logo">
      <img class="logo_partenaire" src="{{asset('assets/img/carousel10.webp')}}" alt="Logo">
      <img class="logo_partenaire" src="{{asset('assets/img/carousel11.webp')}}" alt="Logo">
      <div class="bg-white">
        <img src="{{asset('assets/img/pochon vert.webp')}}" alt="Logo">
      </div>
    </div>
  </section>



DANS header.css ligne 211 COLLER

 background-color: #d2b511;
 
 DANS carousel.css ligne 107 COLLER
 
  background-color: #d2b511;
  
  DANS carousel.css ligne 120 AJOUTER
  
  #carousel_btn a:hover {
    color: #d2b511;
}

DANS carousel.css ligne 141 et 196 METTRE
100px


___________________________________________PUIS_________________________________________________________________________________________________________________
POUR LA PAGE ADMIN
RENTRER LA CMD        composer require easycorp/easyadmin-bundle

PUIS LA CMD           php bin/console make:admin:dashboard

DANS LE CONTROLLER/ADMIN/DASHBOARDCONTROLLER QUI A ETE CREE, COLLER

<?php

namespace App\Controller\Admin;

use App\Entity\User;
use App\Entity\Contact;
use App\Entity\Project;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use EasyCorp\Bundle\EasyAdminBundle\Config\MenuItem;
use EasyCorp\Bundle\EasyAdminBundle\Config\Dashboard;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractDashboardController;


class DashboardController extends AbstractDashboardController
{
    #[Route('/admin', name: 'admin')]
    #[IsGranted('ROLE_ADMIN')]
    public function index(): Response
    {
        return $this->render('admin/dashboard.html.twig');
    }

    public function configureDashboard(): Dashboard
    {
        return Dashboard::new()
            ->setTitle('SoustraitesMoi.Fr-administration')
            ->renderContentMaximized();
    }

    public function configureMenuItems(): iterable
    {
        yield MenuItem::linkToDashboard('Dashboard', 'fa fa-home');
        yield MenuItem::linkToCrud('Projets', 'fas fa-list', Project::class);
        yield MenuItem::linkToCrud('Utilisateurs', 'fas fa-user', User::class);
        yield MenuItem::linkToCrud('Contact', 'fas fa-at', Contact::class);
    }
}

PUIS CREER NOUVEAU DOSSIER admin DANS LES TEMPLATE
PUIS CRER NOUVEAU FICHIER dashboard DANS TEMPLATE/ADMIN, y coller

{% extends "@EasyAdmin/page/content.html.twig" %}

{% block content %}
<h3>Hello Joffrine et bienvenue sur TA page ðŸ˜‰</h3>
{% endblock %}


PUIS RENTRER LA CMD         php bin/console make:admin:crud
CHOISIR LE NUMERO DE L'ENTITY VOULUE.

PUIS DANS LE CONTROLLER/ADMIN/ProjectCrudController QUI A ETE CREE, COLLER:

<?php

namespace App\Controller\Admin;

use App\Entity\Project;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;

class ProjectCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Project::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityLabelInPlural('Projets')
            ->setEntityLabelInSingular('projet')
            ->setPageTitle('index', 'gestion des projets');
    }


    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id')
            ->hideOnIndex()
            ->hideOnForm(),
            TextField::new('Nom_Du_Projet'),
            TextField::new('Categorie'),
            TextEditorField::new('description'),
            TextField::new('Statut'),
        ];
    }
}


MEME CHOSE DANS LE UserCrudController, COLLER

<?php

namespace App\Controller\Admin;

use App\Entity\User;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;

class UserCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return User::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityLabelInPlural('Utilisateurs')
            ->setEntityLabelInSingular('Utilisateur')
            ->setPageTitle('index', 'gestion des utilisateurs');
    }

    
    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id')
            ->hideOnIndex()
            ->hideOnForm(),
            TextField::new('firstName')
            ->setFormTypeOption('disabled', 'disabled'),
            TextField::new('lastName')
            ->setFormTypeOption('disabled', 'disabled'),
            TextField::new('password')
            ->hideOnIndex()
            ->hideOnForm(),
            TextField::new('avatar')
            ->hideOnIndex()
            ->hideOnForm(),
            TextField::new('phone')
            ->setFormTypeOption('disabled', 'disabled'),
            IdField::new('GoogleId')
            ->hideOnIndex()
            ->hideOnForm(),
            TextField::new('Siret')
            ->setFormTypeOption('disabled', 'disabled'),
            TextField::new('CompanyName')
            ->setFormTypeOption('disabled', 'disabled'),
            TextField::new('CompanyCommercialName')
            ->setFormTypeOption('disabled', 'disabled'),
        ];
    }
    
}


/!\ SI ON FAIT UN ContactCrudController (POUR POUVOIR SUPPRIMER DES FORMULAIRES UNE FOIS TRAITES).
IL FAUT CREER UN REPOSITORY ContactRepository, puis y coller:

<?php

namespace App\Repository;

use App\Entity\Contact;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Address>
 *
 * @method Contact|null find($id, $lockMode = null, $lockVersion = null)
 * @method Contact|null findOneBy(array $criteria, array $orderBy = null)
 * @method Contact[]    findAll()
 * @method Contact[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ContactRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Contact::class);
    }

    public function remove(Contact $entity, bool $flush = false): void
    {
        $this->getEntityManager()->remove($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }
    
    ENFIN DANS LE CONTROLLER/ADMIN/ContactCrudController CREE, COLLER:
    
    <?php

namespace App\Controller\Admin;

use App\Entity\Contact;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateField;

class ContactCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Contact::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityLabelInPlural('Contacts')
            ->setEntityLabelInSingular('Contact')
            ->setPageTitle('index', 'gestion des formulaires de contact');
    }

    
    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id')
            ->hideOnIndex()
            ->hideOnForm(),
            TextField::new('firstName'),
            TextField::new('lastName'),
            TextField::new('email'),
            TextEditorField::new('message'),
            DateField::new('createdAt'),
        ];
    }
    
}



