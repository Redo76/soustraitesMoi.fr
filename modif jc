controller contact

<?php

namespace App\Controller;

use App\Entity\Contact;
use App\Form\ContactType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class ContactController extends AbstractController
{
    #[Route('/contact', name: 'app_contact')]
    public function index(): Response
    {
        $contact = new Contact();
        $form = $this->createForm(ContactType::class, $contact);

        return $this->render('contact/index.html.twig', [
            'form' => $form->createview(),
        ]);
    }
}

entity contact

<?php

namespace App\Controller;

use App\Entity\Contact;
use App\Form\ContactType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class ContactController extends AbstractController
{
    #[Route('/contact', name: 'app_contact')]
    public function index(): Response
    {
        $contact = new Contact();
        $form = $this->createForm(ContactType::class, $contact);

        return $this->render('contact/index.html.twig', [
            'form' => $form->createview(),
        ]);
    }
}

entity Contact

<?php

namespace App\Entity;

use App\Repository\ContactRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

#[ORM\Entity(repositoryClass: ContactRepository::class)]
class Contact
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 75, nullable: true)]
    #[Assert\NotNull()]
    private ?string $firstName = null;

    #[ORM\Column(length: 75, nullable: true)]
    #[Assert\NotNull()]
    private ?string $lastName = null;

    #[ORM\Column(length: 180)]
    #[Assert\NotNull()]
    private ?string $email = null;

    #[ORM\Column(length: 150, nullable: true)]
    #[Assert\NotNull()]
    private ?string $subject = null;

    #[ORM\Column(type: Types::TEXT)]
    #[Assert\NotNull()]
    private ?string $message = null;

    #[ORM\Column]
    #[Assert\NotNull()]
    private ?\DateTimeImmutable $createdAt = null;

    public function __construct()
    {
       $this->createdAt = new \DateTimeImmutable() ;
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getFirstName(): ?string
    {
        return $this->firstName;
    }

    public function setFirstName(?string $firstName): self
    {
        $this->firstName = $firstName;

        return $this;
    }

    public function getLastName(): ?string
    {
        return $this->lastName;
    }

    public function setLastName(?string $lastName): self
    {
        $this->lastName = $lastName;

        return $this;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(string $email): self
    {
        $this->email = $email;

        return $this;
    }

    public function getSubject(): ?string
    {
        return $this->subject;
    }

    public function setSubject(?string $subject): self
    {
        $this->subject = $subject;

        return $this;
    }

    public function getMessage(): ?string
    {
        return $this->message;
    }

    public function setMessage(string $message): self
    {
        $this->message = $message;

        return $this;
    }

    public function getCreatedAt(): ?\DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function setCreatedAt(\DateTimeImmutable $createdAt): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }
}

Form Contact

<?php

namespace App\Form;

use App\Entity\Contact;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;


class ContactType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('firstName', TextType::class,[
                'attr'=>[
                    'class'=>'form-control',
                    'minlenght'=>'2',
                    'maxlenght'=>'75',
                ],
                'label' => 'PrÃ©nom',
                'label_attr' =>[
                    'class'=>'form-label mt-4'
                ],
            ])
            ->add('lastName', TextType::class,[
                'attr'=>[
                    'class'=>'form-control',
                    'minlenght'=>'2',
                    'maxlenght'=>'75',
                ],
                'label' => 'Nom',
                'label_attr' =>[
                    'class'=>'form-label mt-4'
                ],
            ])
            ->add('email', EmailType::class,[
                'attr'=>[
                    'class'=>'form-control',
                    'minlenght'=>'2',
                    'maxlenght'=>'180',
                ],
                'label' => 'Email',
                'label_attr' =>[
                    'class'=>'form-label mt-4'
                ],
            ])
            ->add('subject', TextType::class, [
                'attr'=>[
                    'class'=>'form-control',
                    'minlenght'=>'2',
                    'maxlenght'=>'150',
                ],
                'label' => 'Sujet',
                'label_attr' =>[
                    'class'=>'form-label mt-4'
                ],
            ])
            ->add('message', TextareaType::class,[
                'attr'=>[
                    'class'=>'form-control',
                ],
                'label' => 'Votre message',
                'label_attr' =>[
                    'class'=>'form-label mt-4'
                ], 
            ])
            ->add('submit', SubmitType::class,[
                'attr'=>[
                    'class'=>'btn btn-primary mt-4'
                ],
                'label' =>'Envoyer'
            ])
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Contact::class,
        ]);
    }
}


template/contact/index.html.twig

{% extends 'base.html.twig' %}

{% block title %}Contactez nous{% endblock %}

{% block body %}
<div class="container">
    {{ form(form) }}
</div>
{% endblock %}
