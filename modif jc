___________________________________________________MOT DE PASSE OUBLIE____________________________________________________________________________________

DANS ENTITY/USER, AJOUTER:

#[ORM\Column(length: 100, nullable: true)]
    private ?string $resetToken = null;

PUIS Cmd  php bin/console make:entity --regenerate App
PUIS MIGRATION
___________________________________________________________________________________________________________________________________________________________

ENSUITE DANS SECURITYCONTROLLER, METTRE :

// pour mdp oublié
    #[Route('/oubli-mdp', name: 'forgotten_password')]
    public function forgottenPassword(
        Request $request,
        UserRepository $userRepository,
        TokenGeneratorInterface $tokenGenerator,
        EntityManagerInterface $entitymanager,
        MailerInterface $mail,
    ): Response {
        $form = $this->createForm(ResetPasswordRequestFormType::class);

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // rechercher user par son email
            $user = $userRepository->findOneByEmail($form->get('email')->getData());

            // vérifier si on a un utilisateur
            if ($user) {
                // on génere un token de réinitialisation
                $token = $tokenGenerator->generateToken();
                $user->setResetToken($token);
                $entitymanager->persist($user);
                $entitymanager->flush();

                // on génère un lien de réinitialisation du mot de passe
                $url = $this->generateUrl('reset_pass', ['token' => $token], UrlGeneratorInterface::ABSOLUTE_URL);

                //envoi du mail
                $email = (new TemplatedEmail())
                    ->from('soustraitesmoi@gmail.com')
                    ->to($user->getEmail())
                    ->subject('reini mdp')
                    ->htmlTemplate('emails/password_reset.html.twig')
                    ->context([
                        'user' => $user,
                        'url' => $url,
                    ]);

                $mail->send($email);

                $this->addFlash('success', "l'e-mail a bien été envoyé");
                return $this->redirectToRoute('app_login');
            }
            // si $user est null càd si on a pas cette adresse mail dans la bdd
            $this->addFlash('danger', 'Un problème est survenu');
            return $this->redirectToRoute('app_login');
        }

        return $this->render('security/reset_password_request.html.twig', [
            'requestPassForm' => $form->createView()
        ]);
    }

    //nouvelle route pour le lien de réinitialisation
    #[Route('/oubli-mdp/{token}', name: 'reset_pass')]
    public function resetPass(
        string $token,
        Request $request,
        UserRepository $userRepository,
        EntityManagerInterface $entitymanager,
        UserPasswordHasherInterface $passwordHasher,
    ): Response {
        //on vérifie si on a CE token dans la bdd
        $user = $userRepository->findOneByResetToken($token);

        if ($user) {
            $form = $this->createForm(ResetPasswordFormType::class);

            $form->handleRequest($request);

            if ($form->isSubmitted() && $form->isValid()) {
                //on efface le token
                $user->setResetToken(' ');
                $user->setPassword(
                    $passwordHasher->hashPassword(
                        $user,
                        $form->get('password')->getData()
                    )
                );
                $entitymanager->persist($user);
                $entitymanager->flush();

                $this->addFlash('success', 'Votre mot de passe a bien été modifié');
                return $this->redirectToRoute('app_login');
            }

            return $this->render('security/reset_password.html.twig', [
                'passForm' => $form->createView()
            ]);
        }
        $this->addFlash('danger', 'Jeton invalide');
        return $this->redirectToRoute('app_login');
    }
}

_____________________________________________________________________________________________________________________________________________________

ENSUITE CREER UN FORMULAIRE ResetPasswordFormType.php

<?php

namespace App\Form;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\Regex;
use Symfony\Component\Form\Extension\Core\Type\RepeatedType;

class ResetPasswordFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
        ->add('password', RepeatedType::class, [
            'type' => PasswordType::class,
            'invalid_message' => 'Les mots de passe ne correspondent pas.',
            'options' => ['attr' => ['class' => 'password-field']],
            'required' => true,
            'first_options'  => ['label' => 'saisir votre nouveau mot de passe', 'attr' => ['placeholder' => 'Mot de passe']],
            'second_options' => ['label' => false, 'attr' => ['placeholder' => 'Confirmation mot de passe']],
            'constraints' => [
                new Regex([
                    'pattern'=> '/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{6,}$/',
                    'match'=> true,
                    'message'=> 'Veuillez entrer un mot de passe contenant 6 caractères dont 1 majusucle, 1 minuscule et 1 chiffre',
                ]),
            ]
            ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            // Configure your form options here
        ]);
    }
}

_________________________________________________________________________________________________________________________________________________________________

PUIS CREER UN FORMULAIRE ResetPasswordRequestFormType.php

<?php

namespace App\Form;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class ResetPasswordRequestFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('email' , EmailType::class, [
                'label' => 'saisir votre e-mail',
                'attr' => [
                    'placeholder' => 'exemple@email.fr'
                ]
            ]) 
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            // Configure your form options here
        ]);
    }
}

___________________________________________________________________________________________________________________________________________________________________

PUIS DANS TEMPLATE CREER UN DOSSIER emails PUIS UN FICHIER password_request.html.twig, Y METTRE :

<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
	</head>
	<body>
		<p>Bonjour {{ user.firstName }},</p>
		<p>pour réinitialiser votre mot de passe, veuillez cliquer sur le lien suivant :
			<a href="{{ url|raw }}">{{ url|raw }}</a>
		</p>
		<p>Merci</p>
	</body>
</html>

___________________________________________________________________________________________________________________________________________________________________

DANS TEMPLATE SECURITY:
CREER UN FICHIER reset_password_request.html.twig, Y METTRE:

{% extends 'base.html.twig' %}

{% block title %}Réinitialisation du mot de passe
{% endblock %}

{% block body %}
	<main class="container my-3">
		<section class="row">
			<div class="col">
            <h1>Réinitialisation du mot de passe</h1>
            {{form_start(requestPassForm)}}
            {{ form_row(requestPassForm.email)}}
            <button type="submit" class="btn btn-dark">Valider</button>
            {{form_end(requestPassForm)}}
            </div>
		</section>
	</main>
{% endblock %}
__________________________________________________________________________________________________________________________________________________________________

DANS TEMPLATE SECURITY, CREER UN FICHIER reset_password.html.twig, Y METTRE:

{% extends 'base.html.twig' %}

{% block title %}Réinitialisation du mot de passe
{% endblock %}

{% block body %}
	<main class="container my-3">
		<section class="row">
			<div class="col">
            <h1>Réinitialisation du mot de passe</h1>
            {{form_start(passForm)}}
            {{ form_row(passForm.password)}}
            <button type="submit" class="btn btn-dark">Valider</button>
            {{form_end(passForm)}}
            </div>
		</section>
	</main>
{% endblock %}

________________________________________________________________________________________________________________________________________________________________

DANS login.html.twig , DECOMMENTER (ligne 28/29? LE INPUT JUSTE EN DESSOUS DE "MDP OUBLIE") :

<input
				type="hidden" name="_csrf_token" value="{{ csrf_token('authenticate') }}">
        
        
        
        
_________________________________________________POUR LES MESSAGES ADDFLASH________________________________________________________________________________________

DANS TEMPLATE/PARTIALS CREER UN FICHIER flash.html.twig

{% for label, messages in app.flashes %}
	{% for message in messages %}
		<div class="alert alert-{{ label }} alert-dismissible" role="alert">
			<button type="button" class="btn-close" data-bs-dismiss="alert" arial-label="Close"></button>
			<div class="alert-message">
				{{ message|raw}}
			</div>
		</div>
	{% endfor %}
{% endfor %}

DANS base.html.twig ENTRE <body> </body> METTRE,

{% include "partials/flash.html.twig" %}


____________________________________________PAGE CHOIX TYPE DE PROJETS____________________________________________________________________________________________

DANS TEMPLATE/project/new.html.twig, COLLER:

{% extends 'base.html.twig' %}

{% block title %}Nouveau Projet
{% endblock %}

{% block body %}
	{% if app.user %}
		<main id="choixprojet">
			<h2>Choisissez un type de projet</h2>
			<article class="choix_article">
				<div id="choix_div">
					<a href="{{path('app_project_logo')}}">
						<img src="{{asset('assets/img/choixlogo.webp')}}" alt="">
						<div class="d-flex align-center justify-content-between gap-3 w-75">
							<h3>Logo Design</h3>
						</div>
					</a>
					<a href="#">
						<img src="{{asset('assets/img/choixsite.webp ')}}" alt="">
						<div class="d-flex align-center justify-content-between gap-3 w-75">
							<h3>Site web</h3>
						</div>
					</a>

					<a href="{{path('app_project_reseaux')}}">
						<img src="{{asset('assets/img/choixreseaux.webp')}}" alt="">
						<div class="d-flex align-center justify-content-between gap-3 w-75">
							<h3>Reseaux Sociaux</h3>
						</div>
					</a>
					<a href="{{path('app_project_free')}}">
						<img src="{{asset('assets/img/choixlibre.webp')}}" alt="">
						<div id="autretype" class="d-flex align-center justify-content-between gap-3 w-75">
							<h3>Autre type</h3>
						</div>
					</a>
				</div>
			</article>
		{% else %}
			<div>
				<h2>Vous devez d'abord vous connecter ou créer un compte</h2>
				<a href="{{path('app_login')}}">Compris</a>
			</div>
		{% endif %}
	</main>
{% endblock %}
{# {% block footer %}
{% endblock %} #}

PUIS DANS PROJECT.CSS COLLER :

@import url('https://fonts.googleapis.com/css2?family=Dancing+Script:wght@600&display=swap');

/* choix type de projet */
#choixprojet {
    background-color: white;
    height: 100%;
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    margin-bottom: 8%;
}

#choixprojet a {
    display: flex;
    margin: auto;
    justify-content: space-evenly;
    align-items: center;
    width: 80%;
    padding: 3%;
    text-decoration: none;
    border: 1px lightgray solid;
    border-radius: 10px;
    font-size: 25px;
    box-shadow: 1px 1px 1px 1px gray;
    margin-bottom: 4%;
}

#choixprojet h2 {
    margin-bottom: 10%;
    margin-top: 5%;
    font-size: 39px;
    text-align: center;
    padding: 0px 10px 0px 10px;
    font-weight: 600;
    font-family: 'Dancing Script', cursive;
    font-style: italic;
}


#choixprojet a img {
    height: 100px;
    width: 100px;
}

#choixprojet a div {
    padding: 8% 2% 5% 2%;
}

#choixprojet a h3 {
    padding-left: 5%;
}

PUIS DANS PROJECT.CSS @media 768px COLLER :

/* choix projets */

    #choixprojet {
        margin-bottom: 0%;
        padding-bottom: 60px;
    }

    #choixprojet h2 {
        font-size: 62px;
        font-weight: 800;
        margin-bottom: 4%;
    }

    .choix_article {
        width: 90%;
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
        height: 500px;
        justify-content: space-around;
        align-items: center;
    }

    #choix_div {
        width: 90%;
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
    }

    #choixprojet a {
        width: 45%;
    }

    #choixprojet a h3 {
        padding-left: 6%;
        font-size: 36px;
    }

    #choixprojet a img {
        height: 110px;
        width: 110px;
    }
    
PUIS DANS PROJECT.CSS @media 1200px COLLER: 

/* choix projets */

    #choixprojet {
        padding-bottom: 60px;
    }

    #choixprojet h2 {
        margin-bottom: 6%;
        margin-top: 0%;
    }

    .choix_article {
        width: 80%;
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
        height: 500px;
        justify-content: space-around;
    }

    #choix_div {
        width: 90%;
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
    }

    #choixprojet a {
        width: 40%;
    }

    #choixprojet a h3 {
        padding-left: 4%;
        font-size: 28px;
    }


_____________________________________________________CREATION DES DEVIS______________________________________________________________________________________________

CREER DevisController.php COLLER:

<?php

namespace App\Controller;

use App\Entity\Devis;
use App\Entity\Image;
use App\Form\DevisFormType;
use App\Repository\DevisRepository;
use App\Service\UploaderHelper;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\String\Slugger\SluggerInterface;

class DevisController extends AbstractController
{
    #[Route('/devis', name: 'app_devis', methods: ['GET', 'POST'])]
    #[IsGranted('ROLE_EXPERT')]
    public function index(Request $request, SluggerInterface $slugger, UploaderHelper $uploaderHelper, DevisRepository $devisRepository, EntityManagerInterface $entityManager ): Response
    {
        $devis = new Devis($this->getUser());
        $form = $this->createForm(DevisFormType::class, $devis);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // essai upload
            $uploadedFiles = $form['Images']->getData();

            if ($uploadedFiles) {
                foreach ($uploadedFiles as $key => $uploadedFile) {
                    $newFilename = $uploaderHelper->uploadDevis($uploadedFile, $slugger);
                    $img = new Image();
                    $img->setName($newFilename);

                    $devis->addImage($img);
                }
            }
            
            
            
            $devis = $form->getData();

            $entityManager->persist($devis);
            $entityManager->flush();

            $this->addFlash(
                'success',
                'votre devis a bien été enregistré'
            );
            return $this->redirectToRoute('app_home');

    }
    return $this->renderForm('devis/index.html.twig', [
        // 'devis' => $devis,
        'devisForm'=>$form,
    ]);
}
}


________________________________________________________________________________

CREER ENTITY Devis.php Y COLLER:

<?php

namespace App\Entity;

use App\Entity\User;
use DateTimeInterface;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use App\Repository\DevisRepository;
use Doctrine\Common\Collections\Collection;
use Doctrine\Common\Collections\ArrayCollection;



#[ORM\Entity(repositoryClass: DevisRepository::class)]
class Devis
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $reference = null;

    #[ORM\Column(type: Types::DATE_MUTABLE, nullable:true)]
    private ?\DateTimeInterface $date_redaction = null;
    
    #[ORM\Column(type: Types::DATE_MUTABLE, nullable:true)]
    private ?DateTimeInterface $duree_validite = null;

    #[ORM\Column(type: Types::TEXT)]
    private ?string $detail = null;

    #[ORM\Column]
    private ?int $prix_ht = null;

    #[ORM\Column]
    private ?int $prix_ttc = null;

    #[ORM\Column(length: 100)]
    private ?string $raison_social = null;

    #[ORM\Column(length: 255)]
    private ?string $adresse = null;

    #[ORM\Column(length: 30, nullable: true)]
    private ?string $siret = null;

    #[ORM\ManyToOne(inversedBy: 'devis')]
    #[ORM\JoinColumn(nullable: true)]
    private ?User $User = null;

    // essai upload
    #[ORM\OneToMany(mappedBy: 'devis', targetEntity: Image::class, cascade: ['persist', 'remove'])]
    private Collection $images;

    public function __construct($user)
    {
        $this->User = $user;
        $this->images = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getReference(): ?string
    {
        return $this->reference;
    }

    public function setReference(string $reference): self
    {
        $this->reference = $reference;

        return $this;
    }

    public function getDateRedaction(): ?\DateTimeInterface
    {
        return $this->date_redaction;
    }

    public function setDateRedaction(\DateTimeInterface $date_redaction): self
    {
        $this->date_redaction = $date_redaction;

        return $this;
    }

    public function getDureeValidite(): ?\DateTimeInterface
    {
        return $this->duree_validite;
    }

    public function setDureeValidite(\DateTimeInterface $duree_validite): self
    {
        $this->duree_validite = $duree_validite;

        return $this;
    }

    public function getDetail(): ?string
    {
        return $this->detail;
    }

    public function setDetail(string $detail): self
    {
        $this->detail = $detail;

        return $this;
    }

    public function getPrixHt(): ?int
    {
        return $this->prix_ht;
    }

    public function setPrixHt(int $prix_ht): self
    {
        $this->prix_ht = $prix_ht;

        return $this;
    }

    public function getPrixTtc(): ?int
    {
        return $this->prix_ttc;
    }

    public function setPrixTtc(int $prix_ttc): self
    {
        $this->prix_ttc = $prix_ttc;

        return $this;
    }

    public function getRaisonSocial(): ?string
    {
        return $this->raison_social;
    }

    public function setRaisonSocial(string $raison_social): self
    {
        $this->raison_social = $raison_social;

        return $this;
    }

    public function getAdresse(): ?string
    {
        return $this->adresse;
    }

    public function setAdresse(string $adresse): self
    {
        $this->adresse = $adresse;

        return $this;
    }

    public function getSiret(): ?int
    {
        return $this->siret;
    }

    public function setSiret(int $siret): self
    {
        $this->siret = $siret;

        return $this;
    }

    public function getUser(): ?User
    {
        return $this->User;
    }

    public function setUser(?User $User): self
    {
        $this->User = $User;

        return $this;
    }

    /**
     * @return Collection<int, Image>
     */
    public function getImages(): Collection
    {
        return $this->images;
    }

    public function addImage(Image $image): self
    {
        if (!$this->images->contains($image)) {
            $this->images->add($image);
            $image->setDevis($this);
        }

        return $this;
    }

    public function removeImage(Image $image): self
    {
        if ($this->images->removeElement($image)) {
            // set the owning side to null (unless already changed)
            if ($image->getDevis() === $this) {
                $image->setDevis(null);
            }
        }

        return $this;
    }
}



_______________________________________________________________________________________________

DANS FORM CREER DevisFormType.php Y COLLER:

<?php

namespace App\Form;

use App\Entity\Devis;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Validator\Constraints\Regex;
use Symfony\Component\Validator\Constraints\All;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;

class DevisFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
        // essai upload
        ->add('Images', FileType::class, [
            'label' => 'uploader votre devis en pdf',
            "multiple" => true,
            "required" => false,
            "mapped" => false,
            'row_attr' => ['class' => 'devis_imgs'],
        ])
        ->add('reference', TextType::class, [
            'label' => 'Référence',
            'label_attr' => ['class' => "form-label"],
            'attr' => ['placeholder' => 'nom du projet lié au devis'],
            'required' => true,
        ])
        ->add('date_redaction', DateType::class, [
            'label' => 'Date de rédaction du devis :',
            'label_attr' => ['class' => "form-label"],
            'widget' => 'single_text',
            'format' => 'yyyy-MM-dd',
        ])
        ->add('duree_validite', DateType::class, [
            'label' => 'Date de validité du devis :',
            'label_attr' => ['class' => "form-label"],
            'widget' => 'single_text',
            'format' => 'yyyy-MM-dd',
        ])
            ->add('detail', TextareaType::class, [
                'label' => 'Détail des prestations',
                'label_attr' => ['class' => "form-label"],
                'required' => true,
            ])
            ->add('prix_ht')
            ->add('prix_ttc')
            ->add('raison_Social', TextType::class, [
                'label' => 'raison sociale',
            ])
            ->add('adresse',TextType::class,[
                'label' => 'adresse',
            ])
            ->add('siret', TextType::class, [
                'label' => 'N° de siret',
                'constraints' => [
                    new Regex([
                        'pattern'=> '/^[0-9]{14}$/',
                        'match'=> true,
                        'message'=> 'Veuillez entrer un numéro valide',
                    ]),
                
            // ->add('User')
                ]
            ])
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Devis::class,
        ]);
    }
}


___________________________________________________________________________________

DANS REPOSITORY CREER DevisRepository.php Y COLLER:

<?php

namespace App\Repository;

use App\Entity\Devis;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Devis>
 *
 * @method Devis|null find($id, $lockMode = null, $lockVersion = null)
 * @method Devis|null findOneBy(array $criteria, array $orderBy = null)
 * @method Devis[]    findAll()
 * @method Devis[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class DevisRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Devis::class);
    }

    public function save(Devis $entity, bool $flush = false): void
    {
        $this->getEntityManager()->persist($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function remove(Devis $entity, bool $flush = false): void
    {
        $this->getEntityManager()->remove($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }
}

________________________________________________________________________________________________

DANS TEMPLATE CREER DOSSIER devis PUIS FICHIER index.html.twig

{% extends 'base.html.twig' %}

{% block title %}Proposer un devis
{% endblock %}

{% block body %}
	<h1 id="h1_devis">Proposer votre devis</h1>
	<h6 id="h6_devis">Remplissez ce formulaire.<br>
		ou<br>
		Uploader votre modèle de devis.</h6>
	<main id="devis_main">
		<section id="devis_section">

			{{ form_start(devisForm) }}
			{{ form_row(devisForm.reference) }}
			{{ form_row(devisForm.date_redaction) }}
			{{ form_row(devisForm.duree_validite) }}
			{{ form_row(devisForm.detail) }}
			{{ form_row(devisForm.prix_ht) }}
			{{ form_row(devisForm.prix_ttc) }}
			{{ form_row(devisForm.raison_Social) }}
			{{ form_row(devisForm.adresse) }}
			{{ form_row(devisForm.siret) }}
			<p id="devis_p">Ou si vous préférez</p>
			{{ form_row(devisForm.Images) }}
			<div id="devis_div">
				<button id="devis_btn" type="submit" class="btn">Valider</button>
			</div>
			{{ form_end(devisForm) }}
		</section>
	</main>
{% endblock %}

____________________________________________________________________________________________________
DANS project.css COLLER:


/* page des devis */
#devis_main {
    margin-bottom: 6%;
}

#devis_section {
    width: 75%;
    margin: auto;
    background-color: whitesmoke;
    padding: 30px 10px 30px 10px;
    border-radius: 20px;
}

#devis_section legend {
    font-size: 16px;
}

#devis_section select {
    border-radius: 10px;
    box-shadow: inset 2px 2px 2px #cbced1, inset -0.2px -0.2px 1px black;
}

#devis_section textarea {
    border-radius: 20px;
    box-shadow: inset 4px 4px 4px #cbced1, inset -0.2px -0.2px 1px black;
}

#h1_devis {
    margin-top: 4%;
    margin-bottom: 6%;
    text-align: center;
    font-family: 'Dancing Script', cursive;
    font-size: 39px;
    color: goldenrod;
}

#h6_devis {
    text-align: center;
    margin-bottom: 6%;
    font-weight: 400;
}

.mb-3 input {
    border-radius: 20px;
    box-shadow: inset 4px 4px 4px #cbced1, inset -0.2px -0.2px 1px black;
}

#devis_p {
    text-align: center;
    font-family: 'Dancing Script', cursive;
    font-size: 26px;
    margin-top: 4%;
    margin-bottom: 4%;
}

#devis_form_Images.form-control {
    margin-top: 4%;
    margin-bottom: 4%;
    border-radius: 20px;
    box-shadow: inset 4px 4px 4px #cbced1, inset -0.2px -0.2px 1px black;
}

#devis_form_date_redaction_time_hour {
    display: none;
}

#devis_form_date_redaction_time_minute {
    display: none;
}

#devis_form_duree_validite_time_hour {
    display: none;
}

#devis_form_duree_validite_time_minute {
    display: none;
}

.input-group-text {
    display: none;
}

#devis_div {
    margin-top: 4%;
    margin-bottom: 4%;
    display: flex;
    flex-direction: column;
    align-items: center;
}

#devis_btn {
    margin-top: 6%;
    width: 200px;
}

_____________________________________
DANS project.css @media 768px:

 /* page devis */

    #devis_section {
        padding: 30px 20px 30px 20px;
    }

    #h1_devis {
        font-size: 52px;
        font-weight: 400;
    }

    #h6_devis {
        font-size: 20px;
        font-weight: 400;
    }

    #devis_section legend {
        font-size: 20px;
    }

    #devis_p {
        font-size: 39px;
    }

    #devis_btn {
        width: 500px;
        margin-bottom: 4%;
    }
   
   _______________________________________________
   
    DANS project.css @media 1200px:
    
     /* page devis */

    #devis_section {
        width: 50%;
    }

    #h1_devis {
        margin-top: 0%;
        margin-bottom: 2%;
        font-size: 65px;
        text-shadow: 2px 2px black;
    }

    #h6_devis {
        margin-bottom: 3%;
    }

    #devis_btn {
        font-size: 26px;
    }

_________________________________________________________________________________
DANS ENTITY Image.php AJOUTER :

// essai upload
    #[ORM\ManyToOne(inversedBy: 'devis_doc')]
    private ?Devis $devis = null;

REGENERER GETTERS ET SETTERS

___________________________________________________________________________________

DANS UploaderHelper.php AJOUTER :

// essai upload devis
    public function uploadDevis(UploadedFile $uploadedFile, SluggerInterface $slugger) :string
    {
        //On génère un nouveau nom de fichier
        $originalFilename = pathinfo($uploadedFile->getClientOriginalName(), PATHINFO_FILENAME);
        $safeFilename = $slugger->slug($originalFilename);
        $newFilename = $slugger->slug($safeFilename).'-'.uniqid().'.'.$uploadedFile->guessExtension();

        $uploadedFile->move(
            
            $this->uploadsPath."/devis",
            $newFilename
        );

        return $newFilename;
    }

______________________________________________________________________________________

DANS UPLOADS CREER DOSSIER devis

FAIRE UNE MIGRATION
______________________________________________________________________________________
EASYADMIN

DANS ImageCrudController.php COLLER :

<?php

namespace App\Controller\Admin;

use App\Entity\Image;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;

class ImageCrudController extends AbstractCrudController
{
    public const IMAGES_BASE_PATH = 'assets/uploads/project_img';
    public const IMAGES_UPLOAD_DIR = 'public/assets/uploads/project_img';


    public static function getEntityFqcn(): string
    {
        return Image::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityLabelInPlural('Images')
            ->setEntityLabelInSingular('Image')
            ->setPageTitle('index', 'gestion des images');
    }


    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id')
                ->hideOnIndex()
                ->hideOnForm(),
            ImageField::new('name')
                ->setBasePath(self::IMAGES_BASE_PATH)
                ->setUploadDir(self::IMAGES_UPLOAD_DIR),

        ];
    }
}

__________________________________________________________________________________

RENTRER LA CMD php bin/console make:admin:crud -> SELECTIONNER DEVIS

DANS LE DevisCrudController CREE COLLER:

<?php

namespace App\Controller\Admin;

use App\Entity\Devis;
use App\Entity\Image;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IntegerField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;

class DevisCrudController extends AbstractCrudController
{
    public const IMAGES_BASE_PATH = 'assets/uploads/devis';
    public const IMAGES_UPLOAD_DIR = 'public/assets/uploads/devis';

    public static function getEntityFqcn(): string
    {
        return Devis::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityLabelInPlural('Devis')
            ->setEntityLabelInSingular('Devis')
            ->setPageTitle('index', 'gestion des devis');
    }

    
    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id'),
            TextField::new('reference'),
            DateField::new('date_redaction'),
            DateField::new('duree_validite'),
            TextEditorField::new('detail'),
            IntegerField::new('prix_ht'),
            IntegerField::new('prix_ttc'),
            TextField::new('raison_social'),
            TextField::new('adresse'),
            IntegerField::new('siret'),
            ImageField::new('name')
                ->setBasePath(self::IMAGES_BASE_PATH)
                ->setUploadDir(self::IMAGES_UPLOAD_DIR),
        ];
    }
    
}
___________________________________________________________________________

DANS DashboardController COLLER :

<?php

namespace App\Controller\Admin;

use App\Entity\User;
use App\Entity\Devis;
use App\Entity\Image;
use App\Entity\Contact;
use App\Entity\Project;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use EasyCorp\Bundle\EasyAdminBundle\Config\MenuItem;
use EasyCorp\Bundle\EasyAdminBundle\Config\Dashboard;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractDashboardController;


class DashboardController extends AbstractDashboardController
{
    #[Route('/admin', name: 'admin')]
    #[IsGranted('ROLE_ADMIN')]
    public function index(): Response
    {
        return $this->render('admin/dashboard.html.twig');
    }

    public function configureDashboard(): Dashboard
    {
        return Dashboard::new()
            ->setTitle('SoustraitesMoi.Fr-administration')
            ->renderContentMaximized();
    }

    public function configureMenuItems(): iterable
    {
        yield MenuItem::linkToDashboard('Dashboard', 'fa fa-home');
        yield MenuItem::linkToCrud('Projets libres', 'fas fa-list', Project::class);
        yield MenuItem::linkToCrud('Utilisateurs', 'fas fa-user', User::class);
        yield MenuItem::linkToCrud('Contact', 'fas fa-at', Contact::class);
        yield MenuItem::linkToCrud('Images', 'fas fa-image', Image::class);
        yield MenuItem::linkToCrud('Devis', 'fas fa-money-bill-1', Devis::class);
    }
}
