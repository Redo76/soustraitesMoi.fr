_____________________________________________________CREATION DES DEVIS______________________________________________________________________________________________

CREER DevisController.php COLLER:

<?php

namespace App\Controller;

use App\Entity\Devis;
use App\Entity\Image;
use App\Form\DevisFormType;
use App\Repository\DevisRepository;
use App\Service\UploaderHelper;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\String\Slugger\SluggerInterface;

class DevisController extends AbstractController
{
    #[Route('/devis', name: 'app_devis', methods: ['GET', 'POST'])]
    #[IsGranted('ROLE_EXPERT')]
    public function index(Request $request, SluggerInterface $slugger, UploaderHelper $uploaderHelper, DevisRepository $devisRepository, EntityManagerInterface $entityManager ): Response
    {
        $devis = new Devis($this->getUser());
        $form = $this->createForm(DevisFormType::class, $devis);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // essai upload
            $uploadedFiles = $form['Images']->getData();

            if ($uploadedFiles) {
                foreach ($uploadedFiles as $key => $uploadedFile) {
                    $newFilename = $uploaderHelper->uploadDevis($uploadedFile, $slugger);
                    $img = new Image();
                    $img->setName($newFilename);

                    $devis->addImage($img);
                }
            }
            
            $devis = $form->getData();

            $entityManager->persist($devis);
            $entityManager->flush();

            $this->addFlash(
                'success',
                'votre devis a bien été enregistré'
            );
            return $this->redirectToRoute('app_home');

    }
    return $this->renderForm('devis/index.html.twig', [
        // 'devis' => $devis,
        'devisForm'=>$form,
    ]);
}

// pdf devis Joffrine
#[Route('/pdf-admin', name: 'devis_pdf_admin' , methods: ['GET', 'POST'])]
public function devisPdfAdmin(Request $request, DevisRepository $devisRepository ) {

   $devis=$devisRepository->devisPdf();
   
// Configure Dompdf according to your needs
$pdfOptions = new Options();
$pdfOptions->set('defaultFont', 'Arial');

// Instantiate Dompdf with our options
$dompdf = new Dompdf($pdfOptions);

$html = $this->renderView('devis/pdfadmin.html.twig', [
        'devis' =>$devis,
    ]);

    // Load HTML to Dompdf
$dompdf->loadHtml($html);
    
// (Optional) Setup the paper size and orientation 'portrait' or 'portrait'
$dompdf->setPaper('A4', 'portrait');

// Render the HTML as PDF
$dompdf->render();

// Output the generated PDF to Browser (inline view)
$dompdf->stream("pdfadmin.pdf", [
    "Attachment" => false
]);
}
}


________________________________________________________________________________

CREER ENTITY Devis.php Y COLLER:

<?php

namespace App\Entity;

use App\Entity\User;
use DateTimeInterface;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use App\Repository\DevisRepository;
use Doctrine\Common\Collections\Collection;
use Doctrine\Common\Collections\ArrayCollection;



#[ORM\Entity(repositoryClass: DevisRepository::class)]
class Devis
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

   #[ORM\Column(length: 255, nullable:true)]
    private ?string $reference = null;

    #[ORM\Column(type: Types::DATE_MUTABLE, nullable:true)]
    private ?\DateTimeInterface $date_redaction = null;
    
    #[ORM\Column(type: Types::DATE_MUTABLE, nullable:true)]
    private ?DateTimeInterface $duree_validite = null;

    #[ORM\Column(type: Types::TEXT, nullable:true)]
    private ?string $detail = null;

    #[ORM\Column(nullable:true)]
    private ?int $prix_ht = null;

    #[ORM\Column(nullable:true)]
    private ?int $prix_ttc = null;

    #[ORM\Column(length: 100, nullable:true)]
    private ?string $raison_social = null;

    #[ORM\Column(length: 255, nullable:true)]
    private ?string $adresse = null;

    #[ORM\Column(length: 30, nullable: true)]
    private ?string $siret = null;

    #[ORM\ManyToOne(inversedBy: 'devis')]
    #[ORM\JoinColumn(nullable: true)]
    private ?User $User = null;

    // essai upload
    #[ORM\OneToMany(mappedBy: 'devis', targetEntity: Image::class, cascade: ['persist', 'remove'])]
    private Collection $images;

    public function __construct($user)
    {
        $this->User = $user;
        $this->images = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getReference(): ?string
    {
        return $this->reference;
    }

    public function setReference(string $reference): self
    {
        $this->reference = $reference;

        return $this;
    }

    public function getDateRedaction(): ?\DateTimeInterface
    {
        return $this->date_redaction;
    }

    public function setDateRedaction($date_redaction): self
    {
        $this->date_redaction = $date_redaction;

        return $this;
    }

    public function getDureeValidite(): ?\DateTimeInterface
    {
        return $this->duree_validite;
    }

    public function setDureeValidite($duree_validite): self
    {
        $this->duree_validite = $duree_validite;

        return $this;
    }

    public function getDetail(): ?string
    {
        return $this->detail;
    }

    public function setDetail(string $detail): self
    {
        $this->detail = $detail;

        return $this;
    }

    public function getPrixHt(): ?int
    {
        return $this->prix_ht;
    }

    public function setPrixHt(int $prix_ht): self
    {
        $this->prix_ht = $prix_ht;

        return $this;
    }

    public function getPrixTtc(): ?int
    {
        return $this->prix_ttc;
    }

    public function setPrixTtc(int $prix_ttc): self
    {
        $this->prix_ttc = $prix_ttc;

        return $this;
    }

    public function getRaisonSocial(): ?string
    {
        return $this->raison_social;
    }

    public function setRaisonSocial(string $raison_social): self
    {
        $this->raison_social = $raison_social;

        return $this;
    }

    public function getAdresse(): ?string
    {
        return $this->adresse;
    }

    public function setAdresse(string $adresse): self
    {
        $this->adresse = $adresse;

        return $this;
    }

    public function getSiret(): ?int
    {
        return $this->siret;
    }

    public function setSiret(int $siret): self
    {
        $this->siret = $siret;

        return $this;
    }

    public function getUser(): ?User
    {
        return $this->User;
    }

    public function setUser(?User $User): self
    {
        $this->User = $User;

        return $this;
    }

    /**
     * @return Collection<int, Image>
     */
    public function getImages(): Collection
    {
        return $this->images;
    }

    public function addImage(Image $image): self
    {
        if (!$this->images->contains($image)) {
            $this->images->add($image);
            $image->setDevis($this);
        }

        return $this;
    }

    public function removeImage(Image $image): self
    {
        if ($this->images->removeElement($image)) {
            // set the owning side to null (unless already changed)
            if ($image->getDevis() === $this) {
                $image->setDevis(null);
            }
        }

        return $this;
    }
}



_______________________________________________________________________________________________

DANS FORM CREER DevisFormType.php Y COLLER:

<?php

namespace App\Form;

use App\Entity\Devis;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Validator\Constraints\Regex;
use Symfony\Component\Validator\Constraints\All;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;

class DevisFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
        // essai upload
        ->add('Images', FileType::class, [
            'label' => 'uploader votre devis en pdf',
            "multiple" => true,
            "required" => false,
            "mapped" => false,
            'row_attr' => ['class' => 'devis_imgs'],
        ])
        ->add('reference', TextType::class, [
            'label' => 'Référence',
            'label_attr' => ['class' => "form-label"],
            'attr' => ['placeholder' => 'nom du projet lié au devis'],
            'required' => false,
        ])
        ->add('date_redaction', DateType::class, [
            'label' => 'Date de rédaction du devis :',
            'label_attr' => ['class' => "form-label"],
            'widget' => 'single_text',
            'format' => 'yyyy-MM-dd',
            'required' => false,
        ])
        ->add('duree_validite', DateType::class, [
            'label' => 'Date de validité du devis :',
            'label_attr' => ['class' => "form-label"],
            'widget' => 'single_text',
            'format' => 'yyyy-MM-dd',
            'required' => false,
        ])
            ->add('detail', TextareaType::class, [
                'label' => 'Détail des prestations',
                'label_attr' => ['class' => "form-label"],
                'required' => false,
            ])
            ->add('prix_ht')
            ->add('prix_ttc')
            ->add('raison_Social', TextType::class, [
                'label' => 'raison sociale',
                'required' => false,
            ])
            ->add('adresse',TextType::class,[
                'label' => 'adresse',
                'required' => false,
            ])
            ->add('siret', TextType::class, [
                'label' => 'N° de siret',
                'required' => false,
                'constraints' => [
                    new Regex([
                        'pattern'=> '/^[0-9]{14}$/',
                        'match'=> true,
                        'message'=> 'Veuillez entrer un numéro valide',
                    ]),
                
            // ->add('User')
                ]
            ])
        ;
    }


    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Devis::class,
        ]);
    }
}


___________________________________________________________________________________

DANS REPOSITORY CREER DevisRepository.php Y COLLER:

<?php

namespace App\Repository;

use App\Entity\Devis;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Devis>
 *
 * @method Devis|null find($id, $lockMode = null, $lockVersion = null)
 * @method Devis|null findOneBy(array $criteria, array $orderBy = null)
 * @method Devis[]    findAll()
 * @method Devis[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class DevisRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Devis::class);
    }

    public function save(Devis $entity, bool $flush = false): void
    {
        $this->getEntityManager()->persist($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function remove(Devis $entity, bool $flush = false): void
    {
        $this->getEntityManager()->remove($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }
    
    public function devisPdf()
    {
        $conn = $this->getEntityManager()->getConnection();

        $sql = "SELECT * FROM `devis` ORDER BY date_redaction DESC LIMIT 1;";
    
        $stmt = $conn->prepare($sql);
        $resultSet = $stmt->executeQuery();

        // returns an array of arrays (i.e. a raw data set)
        return $resultSet->fetchAssociative();
        
    }
}

________________________________________________________________________________________________

DANS TEMPLATE CREER DOSSIER devis PUIS FICHIER index.html.twig

{% extends 'base.html.twig' %}

{% block title %}Proposer un devis
{% endblock %}

{% block body %}
	<h1 id="h1_devis">Proposer votre devis</h1>
	<h6 id="h6_devis">Remplissez ce formulaire.<br>
		ou<br>
		Uploader votre modèle de devis.</h6>
	<main id="devis_main">
		<section id="devis_section">

			{{ form_start(devisForm) }}
			{{ form_row(devisForm.reference) }}
			{{ form_row(devisForm.date_redaction) }}
			{{ form_row(devisForm.duree_validite) }}
			{{ form_row(devisForm.detail) }}
			{{ form_row(devisForm.prix_ht) }}
			{{ form_row(devisForm.prix_ttc) }}
			{{ form_row(devisForm.raison_Social) }}
			{{ form_row(devisForm.adresse) }}
			{{ form_row(devisForm.siret) }}
			<p id="devis_p">Ou si vous préférez</p>
			{{ form_row(devisForm.Images) }}
			<div id="devis_div">
				<button id="devis_btn" type="submit" class="btn">Valider</button>
			</div>
			{{ form_end(devisForm) }}
		</section>
	</main>
{% endblock %}


DANS TEMPLATE DEVIS CREER FICHIER pdfadmin.html.twig COLLER :

{% extends 'base.html.twig' %}

{% block stylesheets %}
	<style>
		#devis_h1 {
			text-align: center;
			margin-bottom: 10%;
			background-color: whitesmoke;
		}
		#prix {
			display: flex;
			justify-content: space-around;
		}
		.minitab {
			border-collapse: separate;
			border-spacing: 20px;
		}
		th {
			border: 1px solid black;
			padding: 10px;
		}
		td {
			border: 1px solid black;
			padding: 5px 20px;
		}
		.whitesmoke {
			background-color: whitesmoke;
		}
	</style>
{% endblock %}

{% block title %}Imprimer un devis
{% endblock %}

{% block header %}{% endblock %}

{% block body %}
	<h1 id="devis_h1">Devis n°{{devis.id}}</h1>

	<div>
		<h3 class="devis_h3">Devis établi pour le projet :</h3>
		<p class="devis_p">
			{{devis.reference}}</p>
	</div>
	<hr>
	<h3 class="devis_h3">Dates et montants :</h3>
	<div class="whitesmoke">
		<table class="minitab">
			<thead>
				<tr>
					<th scope="col">Date de redaction</th>
					<th scope="col">Durée de validité</th>
					<th scope="col">Montant HT</th>
					<th scope="col">Montant TTC</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>{{devis.date_redaction|format_datetime('medium', 'none', locale='fr')}}</td>
					<td>{{devis.duree_validite|format_datetime('medium', 'none', locale='fr')}}</td>
					<td>{{devis.prix_ht}}
						euros</td>
					<td>{{devis.prix_ttc}}
						euros</td>
				</tr>
			</tbody>
		</table>
	</div>
	<hr>
	<div>
		<h3 class="devis_h3">Détail des prestations :</h3>
		<p class="devis_p">
			{{devis.detail}}</p>
	</div>
	<hr>
	<h3 class="devis_h3">Société qui a établi le devis :</h3>
	<div class="whitesmoke">
		<table class="minitab">
			<thead>
				<tr>
					<th scope="col">Raison Sociale</th>
					<th scope="col">Adresse</th>
					<th scope="col">N° de siret</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>{{devis.raison_social}}</td>
					<td>{{devis.adresse}}</td>
					<td>{{devis.siret}}</td>
				</tr>
			</tbody>
		</table>
	</div>
{% endblock %}

{% block footer %}{% endblock %}


____________________________________________________________________________________________________
DANS project.css COLLER:


/* page des devis */
#devis_main {
    margin-bottom: 6%;
}

#devis_section {
    width: 75%;
    margin: auto;
    background-color: whitesmoke;
    padding: 30px 10px 30px 10px;
    border-radius: 20px;
}

#devis_section legend {
    font-size: 16px;
}

#devis_section select {
    border-radius: 10px;
    box-shadow: inset 2px 2px 2px #cbced1, inset -0.2px -0.2px 1px black;
}

#devis_section textarea {
    border-radius: 20px;
    box-shadow: inset 4px 4px 4px #cbced1, inset -0.2px -0.2px 1px black;
}

#h1_devis {
    margin-top: 4%;
    margin-bottom: 6%;
    text-align: center;
    font-family: 'Dancing Script', cursive;
    font-size: 39px;
    color: goldenrod;
}

#h6_devis {
    text-align: center;
    margin-bottom: 6%;
    font-weight: 400;
}

.mb-3 input {
    border-radius: 20px;
    box-shadow: inset 4px 4px 4px #cbced1, inset -0.2px -0.2px 1px black;
}

#devis_p {
    text-align: center;
    font-family: 'Dancing Script', cursive;
    font-size: 26px;
    margin-top: 4%;
    margin-bottom: 4%;
}

#devis_form_Images.form-control {
    margin-top: 4%;
    margin-bottom: 4%;
    border-radius: 20px;
    box-shadow: inset 4px 4px 4px #cbced1, inset -0.2px -0.2px 1px black;
}

#devis_form_date_redaction_time_hour {
    display: none;
}

#devis_form_date_redaction_time_minute {
    display: none;
}

#devis_form_duree_validite_time_hour {
    display: none;
}

#devis_form_duree_validite_time_minute {
    display: none;
}

.input-group-text {
    display: none;
}

#devis_div {
    margin-top: 4%;
    margin-bottom: 4%;
    display: flex;
    flex-direction: column;
    align-items: center;
}

#devis_btn {
    margin-top: 6%;
    width: 200px;
}

_____________________________________
DANS project.css @media 768px:

 /* page devis */

    #devis_section {
        padding: 30px 20px 30px 20px;
    }

    #h1_devis {
        font-size: 52px;
        font-weight: 400;
    }

    #h6_devis {
        font-size: 20px;
        font-weight: 400;
    }

    #devis_section legend {
        font-size: 20px;
    }

    #devis_p {
        font-size: 39px;
    }

    #devis_btn {
        width: 500px;
        margin-bottom: 4%;
    }
   
   _______________________________________________
   
    DANS project.css @media 1200px:
    
     /* page devis */

    #devis_section {
        width: 50%;
    }

    #h1_devis {
        margin-top: 0%;
        margin-bottom: 2%;
        font-size: 65px;
        text-shadow: 2px 2px black;
    }

    #h6_devis {
        margin-bottom: 3%;
    }

    #devis_btn {
        font-size: 26px;
    }

_________________________________________________________________________________
DANS ENTITY Image.php AJOUTER :

// essai upload
    #[ORM\ManyToOne(inversedBy: 'devis_doc')]
    private ?Devis $devis = null;

REGENERER GETTERS ET SETTERS

___________________________________________________________________________________

DANS UploaderHelper.php AJOUTER :

// essai upload devis
    public function uploadDevis(UploadedFile $uploadedFile, SluggerInterface $slugger) :string
    {
        //On génère un nouveau nom de fichier
        $originalFilename = pathinfo($uploadedFile->getClientOriginalName(), PATHINFO_FILENAME);
        $safeFilename = $slugger->slug($originalFilename);
        $newFilename = $slugger->slug($safeFilename).'-'.uniqid().'.'.$uploadedFile->guessExtension();

        $uploadedFile->move(
            
            $this->uploadsPath."/devis",
            $newFilename
        );

        return $newFilename;
    }

______________________________________________________________________________________

DANS UPLOADS CREER DOSSIER devis

FAIRE UNE MIGRATION
______________________________________________________________________________________
EASYADMIN

DANS ImageCrudController.php COLLER :

<?php

namespace App\Controller\Admin;

use App\Entity\Image;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;

class ImageCrudController extends AbstractCrudController
{
    public const IMAGES_BASE_PATH = 'assets/uploads/project_img';
    public const IMAGES_UPLOAD_DIR = 'public/assets/uploads/project_img';


    public static function getEntityFqcn(): string
    {
        return Image::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityLabelInPlural('Images')
            ->setEntityLabelInSingular('Image')
            ->setPageTitle('index', 'gestion des images');
    }


    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id')
                ->hideOnIndex()
                ->hideOnForm(),
            ImageField::new('name')
                ->setBasePath(self::IMAGES_BASE_PATH)
                ->setUploadDir(self::IMAGES_UPLOAD_DIR),

        ];
    }
}

__________________________________________________________________________________

RENTRER LA CMD php bin/console make:admin:crud -> SELECTIONNER DEVIS

DANS LE DevisCrudController CREE COLLER:

<?php

namespace App\Controller\Admin;

use App\Entity\Devis;
use App\Entity\Image;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IntegerField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;

class DevisCrudController extends AbstractCrudController
{
    public const IMAGES_BASE_PATH = 'assets/uploads/devis';
    public const IMAGES_UPLOAD_DIR = 'public/assets/uploads/devis';

    public static function getEntityFqcn(): string
    {
        return Devis::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityLabelInPlural('Devis')
            ->setEntityLabelInSingular('Devis')
            ->setPageTitle('index', 'gestion des devis');
    }

    
    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id'),
            TextField::new('reference'),
            DateField::new('date_redaction'),
            DateField::new('duree_validite'),
            TextEditorField::new('detail'),
            IntegerField::new('prix_ht'),
            IntegerField::new('prix_ttc'),
            TextField::new('raison_social'),
            TextField::new('adresse'),
            IntegerField::new('siret'),
            ImageField::new('name')
                ->setBasePath(self::IMAGES_BASE_PATH)
                ->setUploadDir(self::IMAGES_UPLOAD_DIR),
        ];
    }
    
}
___________________________________________________________________________

DANS DashboardController COLLER :

<?php

namespace App\Controller\Admin;

use App\Entity\User;
use App\Entity\Devis;
use App\Entity\Image;
use App\Entity\Contact;
use App\Entity\Project;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use EasyCorp\Bundle\EasyAdminBundle\Config\MenuItem;
use EasyCorp\Bundle\EasyAdminBundle\Config\Dashboard;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractDashboardController;


class DashboardController extends AbstractDashboardController
{
    #[Route('/admin', name: 'admin')]
    #[IsGranted('ROLE_ADMIN')]
    public function index(): Response
    {
        return $this->render('admin/dashboard.html.twig');
    }

    public function configureDashboard(): Dashboard
    {
        return Dashboard::new()
            ->setTitle('SoustraitesMoi.Fr-administration')
            ->renderContentMaximized();
    }

    public function configureMenuItems(): iterable
    {
        yield MenuItem::linkToDashboard('Dashboard', 'fa fa-home');
        yield MenuItem::linkToCrud('Projets libres', 'fas fa-list', Project::class);
        yield MenuItem::linkToCrud('Utilisateurs', 'fas fa-user', User::class);
        yield MenuItem::linkToCrud('Contact', 'fas fa-at', Contact::class);
        yield MenuItem::linkToCrud('Images', 'fas fa-image', Image::class);
        yield MenuItem::linkToCrud('Devis', 'fas fa-money-bill-1', Devis::class);
    }
}
