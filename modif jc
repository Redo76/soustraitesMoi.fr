MODIF ENTITY USER POUR AJOUT NOM SOCIETE, TEL, SIRET

<?php

namespace App\Entity;

use App\Repository\UserRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\UserInterface;

#[ORM\Entity(repositoryClass: UserRepository::class)]
#[ORM\Table(name: '`user`')]
#[UniqueEntity(fields: ['email'], message: 'Il existe déjà un compte avec cet email')]
class User implements UserInterface, PasswordAuthenticatedUserInterface
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 75)]
    private ?string $firstName = null;

    #[ORM\Column(length: 75)]
    private ?string $lastName = null;
    
    #[ORM\Column(length: 18)]
    private ?string $phone = null;

    #[ORM\Column(length: 180, unique: true)]
    private ?string $email = null;
    
    #[ORM\Column(length: 75, nullable: true)]
    private ?string $companyName = null;
    
    #[ORM\Column(length: 180, nullable: true)]
    private ?string $companyCommercialName = null;
    
    #[ORM\Column(length: 18, nullable: true)]
    private ?int $siret = null;

    #[ORM\Column]
    private array $roles = [];

    /**
     * @var string The hashed password
     */
    #[ORM\Column]
    private ?string $password = null;

    #[ORM\Column(type: Types::TEXT, nullable: true)]
    private ?string $avatar = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $googleId = null;

    #[ORM\OneToOne(cascade: ['persist', 'remove'])]
    private ?Address $address = null;

    #[ORM\Column(type: Types::TEXT, nullable: true)]
    private ?string $description = null;


    public function getId(): ?int
    {
        return $this->id;
    }

    public function getFirstName(): ?string
    {
        return $this->firstName;
    }

    public function setFirstName(string $firstName): self
    {
        $this->firstName = $firstName;

        return $this;
    }

    public function getLastName(): ?string
    {
        return $this->lastName;
    }

    public function setLastName(string $lastName): self
    {
        $this->lastName = $lastName;

        return $this;
    }


    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(string $email): self
    {
        $this->email = $email;

        return $this;
    }

    /**
     * A visual identifier that represents this user.
     *
     * @see UserInterface
     */
    public function getUserIdentifier(): string
    {
        return (string) $this->email;
    }

    /**
     * @see UserInterface
     */
    public function getRoles(): array
    {
        $roles = $this->roles;
        // guarantee every user at least has ROLE_USER
        $roles[] = 'ROLE_USER';

        return array_unique($roles);
    }

    public function setRoles(array $roles): self
    {
        $this->roles = $roles;

        return $this;
    }

    /**
     * @see PasswordAuthenticatedUserInterface
     */
    public function getPassword(): string
    {
        return $this->password;
    }

    public function setPassword(string $password): self
    {
        $this->password = $password;

        return $this;
    }

    /**
     * @see UserInterface
     */
    public function eraseCredentials()
    {
        // If you store any temporary, sensitive data on the user, clear it here
        // $this->plainPassword = null;
    }
    
    public function getAvatar(): ?string
    {
        return $this->avatar;
    }

    public function setAvatar(?string $avatar): self
    {
        $this->avatar = $avatar;

        return $this;
    }
    public function getGoogleId(): ?string
    {
        return $this->googleId;
    }

    public function setGoogleId(?string $googleId): self
    {
        $this->googleId = $googleId;

        return $this;
    }

    public function getAddress(): ?Address
    {
        return $this->address;
    }

    public function setAddress(?Address $address): self
    {
        $this->address = $address;

        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;

        return $this;
    }

    public function getPhone(): ?string
    {
        return $this->phone;
    }

    public function setPhone(string $phone): self
    {
        $this->phone = $phone;

        return $this;
    }

    public function getCompanyName(): ?string
    {
        return $this->companyName;
    }

    public function setCompanyName(string $companyName): self
    {
        $this->companyName = $companyName;

        return $this;
    }

    public function getCompanyCommercialName(): ?string
    {
        return $this->companyCommercialName;
    }

    public function setCompanyCommercialName(string $companyCommercialName): self
    {
        $this->companyCommercialName = $companyCommercialName;

        return $this;
    }

    public function getSiret(): ?int
    {
        return $this->siret;
    }

    public function setSiret(int $siret): self
    {
        $this->siret = $siret;

        return $this;
    }


}


********************************************************************************************************************************************************************
MODIF FORMULAIRE REGISTRATION FORM

<?php

namespace App\Form;

use App\Entity\User;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Validator\Constraints\Regex;
use Symfony\Component\Validator\Constraints\IsTrue;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\NumberType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\RepeatedType;

class RegistrationFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('firstname', TextType::class, [
                'label' => 'Prénom',
                'attr' => ['class' => 'firstName'],
                'required' => true,
            ])
            ->add('lastname', TextType::class, [
                'label' => 'Nom',
                'attr' => ['class' => 'Nom'],
                'required' => true,
            ])
            ->add('email', EmailType::class, [
                'required' => true,
            ])

            ->add('phone', TextType::class, [
                'label' => 'Téléphone',
                'required' => true,
                'constraints' => [
                    new Regex([
                        'pattern'=> '/^(?:(?:\+|00)33[\s.-]{0,3}(?:\(0\)[\s.-]{0,3})?|0)[1-9](?:(?:[\s.-]?\d{2}){4}|\d{2}(?:[\s.-]?\d{3}){2})$/',
                        'match'=> true,
                        'message'=> 'Veuillez entrer un numéro valide',
                    ]),
                ]
            ])
            ->add('companyName', TextType::class, [
                'label' => 'Nom de la société',
            ])
            ->add('companyCommercialName', TextType::class, [
                'label' => 'Nom commercial  de la société',
            ])
            
            ->add('siret', NumberType::class, [
                'label' => 'N° de Siret',
                'constraints' => [
                    new Regex([
                        'pattern'=> '/^[0-9]{9}$/',
                        'match'=> true,
                        'message'=> 'Veuillez entrer un numéro valide',
                    ]),
                ]
            ])
            
            ->add('password', RepeatedType::class, [
                'type' => PasswordType::class,
                'invalid_message' => 'Les mots de passe ne correspondent pas.',
                'options' => ['attr' => ['class' => 'password-field']],
                'required' => true,
                'first_options'  => ['label' => 'Mot de passe'],
                'second_options' => ['label' => 'Confirmation de mot de passe'],
                'constraints' => [
                    new Regex([
                        'pattern'=> '/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{6,}$/',
                        'match'=> true,
                        'message'=> 'Veuillez entrer un mot de passe contenant 6 caractères dont 1 majusucle, 1 minuscule et 1 chiffre',
                    ]),
                ]
            ])
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => User::class,
        ]);
    }
}

**********************************************************************************************************************************************************************
TEMPLATE profil_client/index.html.twig

{% extends 'base.html.twig' %}

{% block title %}Mon compte client
{% endblock %}

{% block body %}
	<section class="h-100 gradient-custom-2">
		<div class="container py-5 h-100">
			<div class="row d-flex justify-content-center align-items-center h-100">
				<div class="col col-lg-9 col-xl-7">
					<div class="card">
						<div class="rounded-top text-white d-flex flex-row" style="background-color: #000; height:200px;">
							<div class="ms-4 mt-5 d-flex flex-column" style="width: 150px; height: 150px;">
								<img style="width: 150px; height: 150px" {% if (app.user.googleId) %} src="{{app.user.avatar}}" {% else %} ({% if app.user.avatar == null %} src="{{asset("assets/uploads/avatar/default.png")}}" {% else %} src="{{asset("uploads/avatar/" ~ app.user.avatar)}}") {% endif %} {% endif %} alt="Generic placeholder image" class="img-fluid img-thumbnail mt-4 mb-2" style="width: 150px; z-index: 1">
							</div>
							<div class="ms-3" style="margin-top: 130px; color:#d2b511">
								<h5>{{app.user.firstname}}
									{{app.user.lastname}}</h5>
							</div>
						</div>
						<div class="p-4 text-black" style="background-color: #f8f9fa;">
							<button type="button" class="btn btn-outline-dark" style="background-color:#d2b511;" data-mdb-ripple-color="dark" style="z-index:1;">
								Suivre mon projet
							</button>
						</div>
						<div class="card-body p-4 text-black">
							<div class=" mb-5">
								<p class="lead fw-normal mb-1">Mes infos enregistrées</p>
							</div>
							<div class="p-3" style="background-color: #f8f9fa; box-shadow: 2px 2px gray">
								<p class="font-italic mb-1">{{app.user.email}}</p>
								<p class="font-italic mb-1">{{app.user.phone}}</p>
								<p class="font-italic mb-0">{{app.user.companyName}}</p>
							</div>
							<button type="button" class="btn btn-outline-dark mt-5" style="background-color:#d2b511;" data-mdb-ripple-color="dark" style="z-index:1;">
								Modifier mon profil
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>{% endblock %}




